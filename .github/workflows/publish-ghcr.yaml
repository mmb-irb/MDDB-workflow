name: Build and Push Containers

on:
  push:
    tags:
      - '*'

env:
  REGISTRY: ghcr.io
  USER: mmb-irb
  IMAGE_NAME: mddb_wf

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Extract version without 'v' prefix
      - name: Extract version
        id: version
        run: |
          VERSION=${{ github.ref_name }}
          # Remove 'v' prefix if it exists
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Login to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.USER }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.USER }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repository_url }}
            org.opencontainers.image.description="Container image for MDDB workflow"
            org.opencontainers.image.version=${{ steps.version.outputs.version }}

  slack_notification:
    runs-on: ubuntu-latest
    needs: [ build-and-push ] # Wait for all main jobs to finish
    if: always() # Run even if one of the jobs fails
    steps:
      - name: Send Slack message
        run: |
          STATUS="${{ needs.build-and-push.result }}"
          MESSAGE="Workflow *${{ github.workflow }}* in repo *<https://github.com/${{ github.repository }}|${{ github.repository }}>* completed with status: ${STATUS}

          Download *<https://github.com/${{ github.repository }}/pkgs/container/${{ env.IMAGE_NAME }}|Container image>*"
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"${MESSAGE}\"}" \
            "$SLACK_WEBHOOK_URL"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
